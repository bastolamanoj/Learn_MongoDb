Note:-
# MongoDB with DotNet (ASP.NET) — Key Learning Guide

## 1. **Project Setup**
- Use Visual Studio/.NET SDK and install the `MongoDB.Driver` NuGet package.
- Organize your project: separate Controllers, Models, Data Access, and Configurations (see your `RestApp/RestRes` structure).

## 2. **Connecting to MongoDB**
- Configure your MongoDB connection string in `appsettings.json`.
- Inject and use `IMongoClient` via Dependency Injection for clean architecture.

## 3. **Core MongoDB Concepts**
- **Database**: Logical grouping of collections.
- **Collection**: Table-like, stores documents.
- **Document**: JSON/BSON object, mapped to C# classes.

## 4. **Data Models in DotNet**
- Define C# classes for your MongoDB documents.
- Use MongoDB-specific attributes: `[BsonId]`, `[BsonElement]`.

## 5. **CRUD Operations**
- Implement Create, Read, Update, Delete with `MongoDB.Driver`.
- Example:  
  - Create: `collection.InsertOneAsync(model)`
  - Read: `collection.Find(filter).ToListAsync()`
  - Update: `collection.ReplaceOneAsync(filter, model)`
  - Delete: `collection.DeleteOneAsync(filter)`

## 6. **RESTful API Integration**
- Use Controllers to expose endpoints for CRUD.
- Reference your project’s controller files for practical examples.

## 7. **Configuration & DI**
- Register MongoDB services in `Startup.cs` or `Program.cs`.
- Access configuration safely, avoid hardcoding secrets.

## 8. **Best Practices**
- Use async/await for database calls.
- Validate and sanitize inputs.
- Handle errors gracefully.

## 9. **Advanced MongoDB Usage**
- Aggregation for analytics.
- Indexes for performance.
- Transactions for atomic operations.

## 10. **Testing & Deployment**
- Write unit and integration tests.
- Use tools like Swagger/Postman for API testing.
- Deploy to the cloud and connect to MongoDB Atlas for production.

**Tips:**
- Start with simple CRUD and progress to more advanced topics.
- Study and modify files in your repo for hands-on understanding.
- Use official docs for deeper dives.
